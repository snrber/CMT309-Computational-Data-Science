# -*- coding: utf-8 -*-
"""Q1.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T0g2tHTniulZ8hSF7iTVmdg6Jwmnr8Rj

Docstring
This file contains Question 1.
Q1.1:
Vowels are placed into a dictionary with key:value pairs so that the program
knows what to associate each vowel with. The same is done for uppercase
vowels as per the performa. A new empty string is created to contain the
output of the if statements and a count variable is created to iterate through
the previously created dictionary. The outputs are printed using print
statements.

Q1.2:
3 empty lists are created to contain the outputs of the loops. The first for
loop determines whether the character in a string "s", is a number. If it is,
the character is added to a string, if not, the character is added to a
character list which will produce the non-numeric characters as per the performa.
The output is generated via the prints statements.
"""

#C22106798
#Q1.1

def shift_vowels(s):
  #Dictionaries containing key:value pairs, lower and upper
  vowels = {"a":"i", "e":"o", "i":"u", "o":"a", "u":"e", "A":"I", "E":"O", "I":"U", "O":"A", "U":"E"}
  vowel_duplicate = {"a":"o", "e":"u", "i":"a", "o":"e", "u":"i", "A":"O", "E":"U", "I":"A", "O":"E", "U":"I"}
  
  #Create output string and iteration variable 
  new_string = ""
  count = 0

  for letter in s:
    #Check if vowel
    if letter not in vowels:
      new_string += letter
      count += 1

    #Check if next character in string is the same as previous, apply duplicate rule
    elif s[count] == s[count + 1] or s[count].upper() == s[count + 1] or s[count] == s[count + 1].upper() or s[count].upper() == s[count + 1].upper():
      new_string += vowel_duplicate[letter]

    #Change vowel using key:value pair in vowels
    else:
      new_string += vowels[letter]

  return new_string

#Q1.2

def sum_of_digits(s):
  #Create iteration variables and output storage lists 
  count = 0
  str_int_list = []
  char_list = []

  #Separate ints and alphas
  for character in s:
    if character.isnumeric() == True:
      str_int_list += character
      count += 1
    else:
      char_list += character
  
  #Sum integers in list
  int_list = sum(list(map(int, str_int_list)))

  #Print int output
  int_op = print("The sum of digits operation performs " + "+".join(map(str, str_int_list)))

  #Print extracted non-digits 
  ex_non_dig = print("The extracted non-digits are:", char_list)

  return int_list
